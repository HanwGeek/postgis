-- This function finds the id of a face whose geometry
-- would properly contain the given query point.
--
-- The implementation of this function relies on a properly built
-- topology, so results against an invalid topology are unpredictable.
--
-- If the point falls on the boundary of any face an exception will be
-- raised. Dangling edges will not be considered as face boundaries,
-- which is consistent with ST_GetFaceGeometry.
--
-- The following query should always return true
-- for non-boundary query points (:point)
--
--  ST_Contains(
--    ST_GetFaceGeometry(
--       :topo,
--       ST_GetFaceContainingPoint(:topo, :point)
--    ),
--    :point
--  )
--
--
-- Availability: 3.2.0
CREATE OR REPLACE FUNCTION topology.GetFaceContainingPoint(
  atopology text,
  apoint geometry
)
RETURNS INT
AS $BODY$
DECLARE
  closestEdge RECORD;
  closestCWEdgeEnd RECORD;
  rec RECORD;
  closestNode INT;
  azimuth FLOAT8;
  closestVertex GEOMETRY;
  lastDistance FLOAT8;
  ringLeft GEOMETRY;
  ringRight GEOMETRY;
  sql TEXT;
BEGIN

  sql := format(
    $$
  SELECT
    edge_id,
    geom, -- for Start/EndPoint query
    start_node,
    end_node,
    left_face,
    right_face,
    ST_ShortestLine(geom, $1) AS shortestLine,
    ST_Length(ST_ShortestLine(geom, $1)) AS dist
  FROM %1$I.edge
  ORDER BY
#if POSTGIS_PGSQL_VERSION < 95
    ST_Length(ST_ShortestLine(geom, $1))
#else
    geom <-> $1
#endif
  ASC,
  edge_id ASC
  LIMIT 1
    $$,
    atopology
  );
  RAISE DEBUG 'Query: %', sql;
  RAISE DEBUG 'Point: %', ST_AsEWKT(apoint);
  EXECUTE sql
  USING apoint
  INTO closestEdge;

  IF closestEdge IS NULL
  THEN
    -- If no edge is found the point
    -- is in the universal face
    RETURN 0;
  END IF;

  -- Check if the closest vertex is a node
  closestVertex := ST_StartPoint(closestEdge.shortestLine);
  IF ST_Equals(closestVertex, ST_StartPoint(closestEdge.geom))
  THEN
    closestNode := closestEdge.start_node;
  ELSIF ST_Equals(closestVertex, ST_EndPoint(closestEdge.geom))
  THEN
    closestNode := closestEdge.end_node;
  END IF;

  RAISE DEBUG 'Closest edge is %, shortest line is % (length %)',
    closestEdge.edge_id,
    ST_AsEWKT(closestEdge.shortestLine),
    closestEdge.dist
  ;

  IF closestNode IS NOT NULL
  THEN --{ Closest point is a node

    RAISE DEBUG 'Closest point is node %', closestNode;

    IF closestEdge.dist = 0
    THEN --{ Query point is the node

      -- If all edges incident to the node are
      -- dangling, we can return their common
      -- side face, otherwise the point will be
      -- on multiple face boundaries
      sql := format(
        $$
          WITH incident_edges AS (
            SELECT
              left_face,
              right_face
            FROM %1$I.edge_data
            WHERE start_node = $1
            OR end_node = $1
          ),
          side_faces AS (
            SELECT left_face side_face
            FROM incident_edges
              UNION
            SELECT right_face
            FROM incident_edges
          )
          SELECT array_agg(side_face) sideFaces
          FROM side_faces
        $$,
        atopology
      );
      RAISE DEBUG 'SQL: %', sql;
      EXECUTE sql USING closestNode INTO rec;
      IF array_upper(rec.sideFaces, 1) > 1
      THEN
        RAISE EXCEPTION 'Two or more faces found';
      ELSE
        RETURN rec.sideFaces[1];
      END IF;

    END IF; --} query point is the node

    -- Compute azimuth of segment going from node to query point
    azimuth := ST_Azimuth(
      ST_StartPoint( closestEdge.shortestLine),
      ST_EndPoint(closestEdge.shortestLine)
    );

    RAISE DEBUG 'Closest point is disjoint from node %, shortestLine has azimuth %',
      closestNode,
      azimuth;

    sql := format(
      $$
        WITH incident_edges AS (
          SELECT
            edge_id,
            start_node,
            end_node,
            left_face,
            right_face,
            ST_RemoveRepeatedPoints(geom) as geom
          FROM %1$I.edge_data
          WHERE start_node = $1
          OR end_node = $1
        ), incident_edges_with_azdiff AS (
          SELECT
            edge_id,
            left_face,
            right_face,
            ST_Azimuth(ST_StartPoint(geom), ST_PointN(geom, 2)) - %2$L as azdiff
          FROM
            incident_edges WHERE start_node = $1
          UNION ALL
          SELECT
            -edge_id,
            left_face,
            right_face,
            ST_Azimuth(ST_EndPoint(geom), ST_PointN(geom, ST_NumPoints(geom)-1)) - %2$L
          FROM incident_edges WHERE end_node = $1
        )
        SELECT
          edge_id,
          left_face,
          right_face,
          CASE WHEN azdiff < 0 THEN
            azdiff + 2 * PI()
          ELSE
            azdiff
          END az
        FROM incident_edges_with_azdiff
        ORDER BY az ASC
        LIMIT 1
      $$,
      atopology,
      azimuth
    );
    RAISE DEBUG 'SQL: %', sql;
    EXECUTE sql USING closestNode INTO closestCWEdgeEnd;

    RAISE DEBUG 'Adjiacent edge in CW direction is %, with azimuth %',
      closestCWEdgeEnd.edge_id,
      closestCWEdgeEnd.az
    ;

    -- Return the face on the appropriate side of the
    -- most adjiacent edge end
    IF closestCWEdgeEnd.edge_id > 0 THEN --{{
      -- Edge starts on given node, so we pick its left face
      RETURN closestCWEdgeEnd.left_face;
    ELSE -- }{
      -- Edge ends on given node, so we pick its right face
      RETURN closestCWEdgeEnd.right_face;
    END IF; -- }}

  END IF; --} closest point is a node

  -- If this edge has the same face on the left and right sides
  -- we found the face containing our query point
  IF closestEdge.left_face = closestEdge.right_face
  THEN
    RETURN closestEdge.left_face;
  END IF;

  -- The query point intersects an edge
  IF closestEdge.dist = 0 THEN
    -- We checked the dangling case above
    RAISE EXCEPTION 'Two or more faces found';
  END IF;

  -- TODO: use ST_LineCrossingDirection instead of building rings ?
  -- Beware of https://trac.osgeo.org/postgis/ticket/4935

  -- Compute rings on the left and on the right of the closest edge
  sql := format(
    $$
      WITH ring AS (
        SELECT * FROM topology.GetRingEdges(%1$L, $1)
      ), edges AS (
        SELECT
          r.sequence,
          CASE WHEN r.edge > 0 THEN
            e.geom
          ELSE
            ST_Reverse(e.geom)
          END as geom
        FROM
          ring r,
          %1$I.edge e
        WHERE e.edge_id = abs(r.edge)
      )
      SELECT ST_MakePolygon(
        ST_MakeLine(
          geom
          ORDER BY sequence
        )
      )
      FROM edges
    $$,
    atopology
  );

  BEGIN
    EXECUTE sql USING closestEdge.edge_id INTO ringLeft;
  EXCEPTION WHEN OTHERS THEN
    IF SQLERRM like '%shell must have at least%' THEN
      RAISE EXCEPTION 'Corrupted topology: ring on the left side of edge % is invalid: %',
        closestEdge.edge_id, SQLERRM;
    ELSE
      RAISE EXCEPTION 'Could not build ring on the left side of edge %: %',
        closestEdge.edge_id, SQLERRM;
    END IF;
  END;

  BEGIN
    EXECUTE sql USING -closestEdge.edge_id INTO ringRight;
  EXCEPTION WHEN OTHERS THEN
    IF SQLERRM like '%shell must have at least%' THEN
      RAISE EXCEPTION 'Corrupted topology: ring on the right side of edge % is invalid: %',
        closestEdge.edge_id, SQLERRM;
    ELSE
      RAISE EXCEPTION 'Could not build ring on the right side of edge %: %',
        closestEdge.edge_id, SQLERRM;
    END IF;
  END;

  IF ST_IsPolygonCCW(ringLeft) THEN -- ring on left is a shell
    IF ST_Contains(ringLeft, apoint) THEN
      RETURN closestEdge.left_face;
    ELSE
      RETURN closestEdge.right_face;
    END IF;
  ELSE -- ring on the right is a shell
    IF ST_Contains(ringRight, apoint) THEN
      RETURN closestEdge.right_face;
    ELSE
      RETURN closestEdge.left_face;
    END IF;
  END IF;

  RETURN 0; -- anything not in a face is in the universal face

END;
$BODY$ LANGUAGE 'plpgsql';
